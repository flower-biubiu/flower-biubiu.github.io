<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tree</title>
    <link href="/2024/05/26/Tree/"/>
    <url>/2024/05/26/Tree/</url>
    
    <content type="html"><![CDATA[<h2 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h2><p>给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。</p><p>示例 1:<br>输入：root &#x3D; [1,null,2,3]<br>输出：[1,3,2]<br>示例 2：</p><p>输入：root &#x3D; []<br>输出：[]<br>示例 3：</p><p>输入：root &#x3D; [1]<br>输出：[1]</p><p>提示：</p><p>树中节点数目在范围 [0, 100] 内<br>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</p><p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/**<br> *方法<span class="hljs-number">1</span>:递归<br> */<br><br>/**<br> * @param &#123;TreeNode&#125;<span class="hljs-built_in"> root</span><br> * @<span class="hljs-keyword">return</span> <span class="hljs-built_in">&#123;number</span>[]&#125;<br> */<br><br>var inorderTraversal = <span class="hljs-keyword">function</span><span class="hljs-built_in">(root</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = []<br><br>    var recursionTreeNode = <span class="hljs-keyword">function</span> (<span class="hljs-type">node</span>) &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-type">node</span> ) <span class="hljs-keyword">return</span><br><br>        recursionTreeNode(<span class="hljs-type">node</span>.left)<br>        result.push(<span class="hljs-type">node</span>.val)<br>        recursionTreeNode(<span class="hljs-type">node</span>.right)<br><br>    &#125;<br><br>    recursionTreeNode<span class="hljs-built_in">(root</span>)<br><br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/**<br> *方法<span class="hljs-number">2</span>:迭代<br> */<br>var inorderTraversal = <span class="hljs-keyword">function</span> <span class="hljs-built_in">(root</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = []<br>    <span class="hljs-keyword">let</span> stack = []<br><br>    while <span class="hljs-built_in">(root</span> || stack.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">!root</span>) &#123;<br>           <span class="hljs-built_in"> root</span> = stack.pop()<br>            result.push<span class="hljs-built_in">(root</span>.val)<br>           <span class="hljs-built_in"> root</span> =<span class="hljs-built_in"> root</span>.right<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            stack.push<span class="hljs-built_in">(root</span>)<br>           <span class="hljs-built_in"> root</span> =<span class="hljs-built_in"> root</span>.left<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>总结：</p><ol><li><p>递归法利用的是js执行上下文的调用栈</p></li><li><p>迭代法通过维护一个栈</p><ul><li>核心在于：确定当前root的位置（左，中、右，其中中右通过栈维护），确定下一个root的身份，直到root全遍历完且不重复遍历</li></ul></li></ol><h2 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h2><p>给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> levelOrder = function (root) &#123;<br>    <span class="hljs-built_in">let</span> result = []<br>    <span class="hljs-keyword">if</span> (!root) <span class="hljs-built_in">return</span> result<br>    <span class="hljs-built_in">let</span> pre = [root]<br><br>    <span class="hljs-keyword">while</span> (pre.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">let</span> arr = []<br>        <span class="hljs-built_in">let</span> preTemp = [...pre]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = <span class="hljs-number">0</span>; i &lt; preTemp.<span class="hljs-built_in">length</span>; i++) &#123;<br>            arr[i] = preTemp[i].val<br>            pre.shift()<br>            <span class="hljs-keyword">if</span> (preTemp[i].left) pre.<span class="hljs-built_in">push</span>(preTemp[i].left)<br>            <span class="hljs-keyword">if</span> (preTemp[i].right) pre.<span class="hljs-built_in">push</span>(preTemp[i].right)<br>        &#125;<br><br>        result.<span class="hljs-built_in">push</span>(arr)<br>    &#125;<br><br>    <span class="hljs-built_in">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p>分层队列的思想</p></li><li><p>核心在于：</p><ul><li>确定上一层访问的节点，访问过程中，计算下一层访问的节点，直到没有节点待访问</li></ul></li></ul><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h2><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// 遍历思路<br>var hasPathSum = <span class="hljs-keyword">function</span> <span class="hljs-built_in">(root</span>, targetSum) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">!root</span>) <span class="hljs-keyword">return</span><span class="hljs-built_in"> false</span><br>    <span class="hljs-keyword">let</span> result =<span class="hljs-built_in"> false</span><br>    var computedPath = <span class="hljs-keyword">function</span> <span class="hljs-built_in">(root</span>, targetSum) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">!root</span>.left &amp;&amp; <span class="hljs-built_in">!root</span>.right &amp;&amp;<span class="hljs-built_in"> root</span>.val === targetSum) result =<span class="hljs-built_in"> true</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">!root</span>.left &amp;&amp; <span class="hljs-built_in">!root</span>.right &amp;&amp;<span class="hljs-built_in"> root</span>.val !== targetSum) <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">(root</span>.left) computedPath<span class="hljs-built_in">(root</span>.left, targetSum -<span class="hljs-built_in"> root</span>.val)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">(root</span>.right) computedPath<span class="hljs-built_in">(root</span>.right, targetSum -<span class="hljs-built_in"> root</span>.val)<br>    &#125;<br>    computedPath<span class="hljs-built_in">(root</span>, targetSum)<br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 递归思路</span><br>var hasPathSum = <span class="hljs-keyword">function</span> (root, targetSum) &#123;<br>    <span class="hljs-keyword">if</span> (!root) return <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> (!root.left<span class="hljs-operator"> &amp;&amp; </span>!root.right) return root.<span class="hljs-keyword">val</span><span class="hljs-operator"> === </span>targetSum<br>    return  has<span class="hljs-constructor">PathSum(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>, <span class="hljs-params">targetSum</span> - <span class="hljs-params">root</span>.<span class="hljs-params">val</span>)</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span> has<span class="hljs-constructor">PathSum(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>, <span class="hljs-params">targetSum</span> - <span class="hljs-params">root</span>.<span class="hljs-params">val</span>)</span></span><br><span class="hljs-pattern-match">&#125;;</span><br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>叶子节点：!root.left &amp;&amp; !root.right</li><li>函数参数递推关系（区分栈策略的应用）</li></ol><h2 id="124-二叉树的最大路径和"><a href="#124-二叉树的最大路径和" class="headerlink" title="124. 二叉树的最大路径和"></a>124. 二叉树的最大路径和</h2><p>二叉树中的 路径 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p><p>路径和 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xquery">var maxPathSum = <span class="hljs-keyword">function</span><span class="hljs-built_in">(root</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = -Infinity<br>    var dfs = <span class="hljs-keyword">function</span> <span class="hljs-built_in">(root</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">!root</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">let</span> leftMax = Math<span class="hljs-built_in">.max</span>(dfs<span class="hljs-built_in">(root</span>.left), <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">let</span> rightMax = Math<span class="hljs-built_in">.max</span>(dfs<span class="hljs-built_in">(root</span>.right), <span class="hljs-number">0</span>)<br><br>        result = Math<span class="hljs-built_in">.max</span>(result,<span class="hljs-built_in"> root</span>.val + leftMax + rightMax)<br>        <br>        <span class="hljs-keyword">return</span> Math<span class="hljs-built_in">.max</span><span class="hljs-built_in">(root</span>.val + leftMax,<span class="hljs-built_in"> root</span>.val + rightMax)<br><br>    &#125;<br><br>    dfs<span class="hljs-built_in">(root</span>)<br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>总结：</p><ol><li><p>闭包函数返回当前节点对路径和的最大贡献值(后序遍历变形)</p></li><li><p>闭包函数通常用于：</p><ul><li>计算并存储结果</li><li>返回某个状态值</li></ul></li></ol><p>二者取其一或者包含两者，这个解法为取两者</p><h2 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a>145. 二叉树的后序遍历</h2><p>给你一棵二叉树的根节点 root ，返回其节点值的 后序遍历 。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">var postorderTraversal = <span class="hljs-keyword">function</span><span class="hljs-built_in">(root</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = []<br><br>    var dfs = <span class="hljs-keyword">function</span><span class="hljs-built_in">(root</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">!root</span>) <span class="hljs-keyword">return</span><br><br>        dfs<span class="hljs-built_in">(root</span>.left)<br>        dfs<span class="hljs-built_in">(root</span>.right)<br><br>        result.push<span class="hljs-built_in">(root</span>.val)<br>    &#125;<br><br>    dfs<span class="hljs-built_in">(root</span>)<br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="129-求根节点到叶节点数字之和"><a href="#129-求根节点到叶节点数字之和" class="headerlink" title="129. 求根节点到叶节点数字之和"></a>129. 求根节点到叶节点数字之和</h2><p>给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。<br>每条从根节点到叶节点的路径都代表一个数字：</p><p>例如，从根节点到叶节点的路径 1 -&gt; 2 -&gt; 3 表示数字 123 。<br>计算从根节点到叶节点生成的 所有数字之和 。</p><p>叶节点 是指没有子节点的节点。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xquery">var sumNumbers = <span class="hljs-keyword">function</span><span class="hljs-built_in">(root</span>) &#123;<br>    <span class="hljs-keyword">let</span> pathArray = []<br>    <span class="hljs-keyword">let</span><span class="hljs-built_in"> path</span> = []<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span><br><br>    var dfs = <span class="hljs-keyword">function</span><span class="hljs-built_in">(root</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">!root</span>.left &amp;&amp; <span class="hljs-built_in">!root</span>.right) &#123;<br>           <span class="hljs-built_in"> path</span>.push<span class="hljs-built_in">(root</span>.val)<br>            pathArray.push([..<span class="hljs-built_in">.path</span>])<br>           <span class="hljs-built_in"> path</span>.pop<span class="hljs-built_in">(root</span>.val)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>       <span class="hljs-built_in"> path</span>.push<span class="hljs-built_in">(root</span>.val)<br>        <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.left) dfs<span class="hljs-built_in">(root</span>.left)<br>        <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.right) &#123;dfs<span class="hljs-built_in">(root</span>.right)<br>       <span class="hljs-built_in"> path</span>.pop<span class="hljs-built_in">(root</span>.val)<br>    &#125;<br>    dfs<span class="hljs-built_in">(root</span>)<br>    console.log(pathArray)<br><br>    pathArray.forEach((<span class="hljs-type">item</span>) =&gt; &#123;<br>        result = Number(<span class="hljs-type">item</span>.join(<span class="hljs-string">&#x27;&#x27;</span>)) + result<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>Data Structure</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode</title>
    <link href="/2024/01/04/Leetcode/"/>
    <url>/2024/01/04/Leetcode/</url>
    
    <content type="html"><![CDATA[<h2 id="1-无重复字符的最长子串"><a href="#1-无重复字符的最长子串" class="headerlink" title="1. 无重复字符的最长子串"></a>1. 无重复字符的最长子串</h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><p>提示：</p><p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 由英文字母、数字、符号和空格组成</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-keyword">function</span> (s) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">let</span> head = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()<br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(s)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">map</span>.has(arr[i])) &#123;<br>            result = result &lt; i - head  ? i - head : result<br>            head = <span class="hljs-keyword">map</span>.get(arr[i]) + <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">map</span>.set(arr[i], i)<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> result<br><br>&#125;;<br><br>总结：<br><br><span class="hljs-number">1.</span> 左右指针，<span class="hljs-keyword">for</span>循环作为右指针；<br><span class="hljs-number">2.</span> <span class="hljs-built_in">Map</span>方法 <br><br></code></pre></td></tr></table></figure><h2 id="2-合并两个有序数组"><a href="#2-合并两个有序数组" class="headerlink" title="2.合并两个有序数组"></a>2.合并两个有序数组</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs armasm">解法<span class="hljs-number">1</span>:<br><br><span class="hljs-symbol">var</span> merge = <span class="hljs-meta">function</span>(nums1, m, nums2, n) &#123;<br>    let j = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    for(let i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; m + n; i++) &#123;</span><br>        <span class="hljs-meta">if</span>(nums1[i] === <span class="hljs-number">0</span>) &#123;<br>            nums1[i] = nums2[j]<br>            j++<br>        &#125;<br>    &#125;<br>    return nums1.sort()<br><br>&#125;<span class="hljs-comment">;</span><br><br>解法<span class="hljs-number">2</span>:<br><br><span class="hljs-symbol">var</span> merge = <span class="hljs-meta">function</span>(nums1, m, nums2, n) &#123;<br>    let arr = new Array(m+n).fill(<span class="hljs-number">0</span>)<br>    let <span class="hljs-built_in">p1</span> = <span class="hljs-number">0</span><br>    let <span class="hljs-built_in">p2</span> = <span class="hljs-number">0</span><br>    let cur = <span class="hljs-number">0</span><br>    <span class="hljs-meta">while</span>(<span class="hljs-built_in">p1</span> &lt; m <span class="hljs-title">||</span> <span class="hljs-built_in">p2</span> &lt; n) &#123;<br>        <span class="hljs-meta">if</span>(<span class="hljs-built_in">p1</span> === m) &#123;<br>            arr[cur] = nums2[<span class="hljs-built_in">p2</span>]<br>            <span class="hljs-built_in">p2</span>++<br>        &#125; <span class="hljs-meta">else</span> <span class="hljs-meta">if</span>(<span class="hljs-built_in">p2</span> === n) &#123;<br>            arr[cur] = nums1[<span class="hljs-built_in">p1</span>]<br>            <span class="hljs-built_in">p1</span>++<br>        &#125; <span class="hljs-meta">else</span> <span class="hljs-meta">if</span>(nums1[<span class="hljs-built_in">p1</span>] &lt;= nums2[<span class="hljs-built_in">p2</span>]) &#123;<br>            arr[cur] = nums1[<span class="hljs-built_in">p1</span>]<br>            <span class="hljs-built_in">p1</span>++<br>        &#125; <span class="hljs-meta">else</span> &#123;<br>            arr[cur] = nums2[<span class="hljs-built_in">p2</span>]<br>            <span class="hljs-built_in">p2</span>++<br>        &#125;<br>        cur++<br>    &#125;<br>    for(let i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; m + n; i++) &#123;</span><br>        nums1[i] = arr[i]<br>    &#125;<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="3-两数之和"><a href="#3-两数之和" class="headerlink" title="3. 两数之和"></a>3. 两数之和</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) &#123;<br>    <span class="hljs-keyword">for</span>(let i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span>(let j = i + <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">length</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] + nums[j] === target) &#123;<br>                <span class="hljs-keyword">return</span> [i, j]<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> []<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-比较版本号"><a href="#4-比较版本号" class="headerlink" title="4. 比较版本号"></a>4. 比较版本号</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var compareVersion = <span class="hljs-keyword">function</span> (version1, version2) &#123;<br>    <span class="hljs-keyword">let</span> arr1 = version1.split(<span class="hljs-character">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">let</span> arr2 = version2.split(<span class="hljs-character">&#x27;.&#x27;</span>)<br>    <span class="hljs-keyword">let</span> p1 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> p2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (p1 &lt; arr1.length<span class="hljs-operator"> || </span>p2 &lt; arr2.length) &#123;<br>        <span class="hljs-keyword">if</span> (p1<span class="hljs-operator"> === </span>arr1.length) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-constructor">Number(<span class="hljs-params">arr2</span>[<span class="hljs-params">p2</span>])</span><span class="hljs-operator"> === </span><span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span>p2 &lt; arr2.length - <span class="hljs-number">1</span>) &#123;<br>                p2++<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-constructor">Number(<span class="hljs-params">arr2</span>[<span class="hljs-params">p2</span>])</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                return -<span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return <span class="hljs-number">0</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2<span class="hljs-operator"> === </span>arr2.length) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-constructor">Number(<span class="hljs-params">arr1</span>[<span class="hljs-params">p1</span>])</span><span class="hljs-operator"> === </span><span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span>p1 &lt; arr1.length - <span class="hljs-number">1</span>) &#123;<br>                p1++<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-constructor">Number(<span class="hljs-params">arr1</span>[<span class="hljs-params">p1</span>])</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                return <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return <span class="hljs-number">0</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-constructor">Number(<span class="hljs-params">arr1</span>[<span class="hljs-params">p1</span>])</span> &gt; <span class="hljs-constructor">Number(<span class="hljs-params">arr2</span>[<span class="hljs-params">p2</span>])</span>) &#123;<br>                return <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-constructor">Number(<span class="hljs-params">arr1</span>[<span class="hljs-params">p1</span>])</span><span class="hljs-operator"> === </span><span class="hljs-constructor">Number(<span class="hljs-params">arr2</span>[<span class="hljs-params">p2</span>])</span>) &#123;<br>                <span class="hljs-keyword">if</span>(p1<span class="hljs-operator"> === </span>arr1.length - <span class="hljs-number">1</span><span class="hljs-operator"> &amp;&amp; </span>p2<span class="hljs-operator"> === </span>arr2.length - <span class="hljs-number">1</span>) &#123;<br>                    return <span class="hljs-number">0</span><br>                &#125;<br>                p1++<br>                p2++<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return -<span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-二分查找"><a href="#5-二分查找" class="headerlink" title="5.二分查找"></a>5.二分查找</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const data = [<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">25</span>]<br><br><br>const method = <span class="hljs-keyword">function</span> (<span class="hljs-params">arr, value</span>) &#123;<br>    let <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span><br>    let <span class="hljs-built_in">right</span> = arr.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span><br>    <br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">left</span> &lt;= <span class="hljs-built_in">right</span>) &#123;<br>        let <span class="hljs-built_in">mid</span> = Math.<span class="hljs-built_in">floor</span>((<span class="hljs-built_in">left</span> + <span class="hljs-built_in">right</span>) / <span class="hljs-number">2</span>)<br><br>        <span class="hljs-keyword">if</span>(arr[<span class="hljs-built_in">mid</span>] === value) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">mid</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[<span class="hljs-built_in">mid</span>] &lt; value) &#123;<br>            <span class="hljs-built_in">left</span> = <span class="hljs-built_in">mid</span> + <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">right</span> = <span class="hljs-built_in">mid</span> - <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;6:&#x27;</span>,method(data, <span class="hljs-number">6</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;4:&#x27;</span>,method(data, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;5:&#x27;</span>,method(data, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;17:&#x27;</span>, method(data, <span class="hljs-number">17</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;20:&#x27;</span>, method(data, <span class="hljs-number">20</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;30:&#x27;</span>,method(data, <span class="hljs-number">30</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;25:&#x27;</span>,method(data,<span class="hljs-number">25</span>))<br><br>总结：<br><br><span class="hljs-number">1.</span>双指针<br><span class="hljs-number">2.</span><span class="hljs-built_in">left</span> &lt;= <span class="hljs-built_in">right</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JS Point</title>
    <link href="/2023/12/17/JSpoint/"/>
    <url>/2023/12/17/JSpoint/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>JS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>React.md</title>
    <link href="/2023/09/25/React/"/>
    <url>/2023/09/25/React/</url>
    
    <content type="html"><![CDATA[<h2 id="0-前置概念"><a href="#0-前置概念" class="headerlink" title="0. 前置概念"></a>0. 前置概念</h2><ul><li><p>虚拟DOM的本质就是js对象。</p></li><li><p>React是MVC框架。</p></li><li><p>React设计思想：</p><p>  数据变化时，React用虚拟DOM的方式来对比变化前后的DOM,然后以高性能的方式更新页面。</p><ul><li>变换：把数据通过映射关系变换成另一种形式的数据。</li><li>抽象：把UI抽象成多个隐藏内部细节又可复用的函数；通过在一个函数调用另一个函数来实现复杂的UI。</li><li>组合：将两个或者不同的抽象合并成一个。</li></ul></li></ul><h2 id="1-常用钩子"><a href="#1-常用钩子" class="headerlink" title="1. 常用钩子"></a>1. 常用钩子</h2><ul><li><p>useEffect</p><p>  相当于componentDidMount、componentDidUpdate、componentWillUnmount结合体。</p>  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">示例<span class="hljs-number">1</span>:<br>useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    document.title = <span class="hljs-string">`You clicked <span class="hljs-subst">$&#123;<span class="hljs-built_in">count</span>&#125;</span> times`</span>;<br>&#125;, [<span class="hljs-built_in">count</span>]); <span class="hljs-comment">// 只有当count的值发生变化时，才会重新执行`document.title`这一句</span><br><br>示例<span class="hljs-number">2</span>:<br>useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 用路由id获取详情</span><br>    pageStore.getDetail(<span class="hljs-built_in">Number</span>(id))<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 首次渲染不会执行</span><br>        <span class="hljs-comment">// 非首次渲染优先执行</span><br>        runInAction(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>            pageStore.setLoading(<span class="hljs-literal">true</span>)<br>        &#125;)<br>    &#125;<br>&#125;, [pageStore, id])<br></code></pre></td></tr></table></figure><ul><li>执行时机，首次渲染和更新渲染；如果为第二个参数空数组，相当于只有首次渲染时执行；</li><li>通过返回一个新函数来解绑一些副作用</li></ul></li><li><p>useContext</p><p>  全局状态管理，为了绑定数据提供全局的响应式数据。</p>  <figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">const</span> <span class="hljs-type">MyContext</span> = <span class="hljs-type">React</span>.createContext(<span class="hljs-meta">&#123;...&#125;</span>)<br><span class="hljs-keyword">const</span> context = <span class="hljs-type">React</span>.useContext(<span class="hljs-type">MyContext</span>)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Knowledge Points</title>
    <link href="/2023/05/29/Points/"/>
    <url>/2023/05/29/Points/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Vue父组件嵌套子组件声明周期"><a href="#1-Vue父组件嵌套子组件声明周期" class="headerlink" title="1. Vue父组件嵌套子组件声明周期"></a>1. Vue父组件嵌套子组件声明周期</h2><h2 id="2-exports、module-exports和export、export-default"><a href="#2-exports、module-exports和export、export-default" class="headerlink" title="2. exports、module.exports和export、export default"></a>2. exports、module.exports和export、export default</h2><ul><li><a href="https://segmentfault.com/a/1190000010426778">https://segmentfault.com/a/1190000010426778</a> &#x2F;&#x2F; ES6</li></ul><h2 id="3-static"><a href="#3-static" class="headerlink" title="3. static"></a>3. static</h2><h2 id="4-switch"><a href="#4-switch" class="headerlink" title="4. switch"></a>4. switch</h2><p><img src="/../images/switchCase.png"></p><h2 id="5-test"><a href="#5-test" class="headerlink" title="5. test"></a>5. test</h2><p><a href="/html/test.html">hahahaha</a></p>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Good Fuction</title>
    <link href="/2023/05/15/Fuction/"/>
    <url>/2023/05/15/Fuction/</url>
    
    <content type="html"><![CDATA[<h2 id="1-webp"><a href="#1-webp" class="headerlink" title="1 webp"></a>1 webp</h2><ul><li>webp是什么？</li><li>谷歌开发出来用于加快图片加载速度的图片格式；节省服务器带宽和数据空间。</li><li>转换为webp格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 粗暴修改后缀法</span><br> <span class="hljs-title function_">webpReplace</span>(<span class="hljs-params">url</span>) &#123;<br>   <span class="hljs-keyword">if</span> (!url) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>   <span class="hljs-keyword">const</span> [imgUrl = <span class="hljs-string">&#x27;&#x27;</span>, params = <span class="hljs-string">&#x27;&#x27;</span>] = <span class="hljs-built_in">decodeURIComponent</span>(url).<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;@&#x27;</span>)<br>   <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/\.(png|jpg|gif)$/</span>.<span class="hljs-title function_">test</span>(imgUrl) || !<span class="hljs-regexp">/(p0|p1|img)\.meituan\.net/g</span>.<span class="hljs-title function_">test</span>(imgUrl) || !<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">isSupportWebp</span>()) &#123;<br>     <span class="hljs-keyword">return</span> url<br>   &#125;<br>   <span class="hljs-keyword">return</span> params ? <span class="hljs-string">`<span class="hljs-subst">$&#123;imgUrl&#125;</span>.webp@<span class="hljs-subst">$&#123;params&#125;</span>`</span> : <span class="hljs-string">`<span class="hljs-subst">$&#123;imgUrl&#125;</span>.webp`</span><br> &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-滑动定位到指定DOM"><a href="#2-滑动定位到指定DOM" class="headerlink" title="2 滑动定位到指定DOM"></a>2 滑动定位到指定DOM</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`scrollCard<span class="hljs-subst">$&#123;id&#125;</span>`</span>).<span class="hljs-title function_">scrollIntoView</span>()<br></code></pre></td></tr></table></figure><h2 id="3-点击空白关闭弹窗"><a href="#3-点击空白关闭弹窗" class="headerlink" title="3 点击空白关闭弹窗"></a>3 点击空白关闭弹窗</h2><ul><li>transform: translateY 是css3的一个属性，用于沿着Y轴（垂直方向）移动元素。</li><li>translateY的值可以是（px、em、rem、%）正值会使元素向下移动，负值会使元素向上移动。</li><li>animation声明动画的属性；动画的实现通过使用@keyframes建立两个或两个以上关键帧来实现。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div @click=<span class="hljs-string">&quot;close($event)&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;signpop-mask&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;signpop-container&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; btm: showAnim, up: !showAnim &#125;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;signpop-close&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;signpop-wrap&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;stopClose($event)&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;signpop-head&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;signpop-content&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;signpop-footer&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-title function_">close</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">showAnim</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;close&#x27;</span>, e)<br>    &#125;, <span class="hljs-number">550</span>)<br>    <span class="hljs-variable language_">this</span>.$once(<span class="hljs-string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>        &#125;<br>    &#125;)<br>&#125;,<br><span class="hljs-comment">// 实现点击弹窗内容自身阻止冒泡，以防弹窗被关闭</span><br><span class="hljs-title function_">stopClose</span>(<span class="hljs-params">e</span>) &#123;<br>    e.<span class="hljs-title function_">stopPropagation</span>()<br>&#125;,<br><span class="hljs-title function_">toggleBodyScroll</span>(<span class="hljs-params">isFixed</span>) &#123;<br>    <span class="hljs-keyword">const</span> bodyEl = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br>    <span class="hljs-keyword">if</span> (isFixed) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">top</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">scrollY</span><br>        bodyEl.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;fixed&#x27;</span><br>        bodyEl.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;-<span class="hljs-variable language_">this</span>.top&#125;</span>px`</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">showAnim</span> = <span class="hljs-literal">false</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        bodyEl.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;&#x27;</span><br>        bodyEl.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">&#x27;&#x27;</span><br><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">top</span>)<br>    &#125;<br>&#125;<br><br><br>@keyframes toUp &#123;<br>  <span class="hljs-keyword">from</span> &#123;<br>      <span class="hljs-attr">transform</span>: <span class="hljs-title function_">translateY</span>(<span class="hljs-number">100</span>%);<br>  &#125;<br>  to &#123;<br>      <span class="hljs-attr">transform</span>: <span class="hljs-title function_">translateY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br>@keyframes toBtm &#123;<br>  <span class="hljs-keyword">from</span> &#123;<br>      <span class="hljs-attr">transform</span>: <span class="hljs-title function_">translateY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  to &#123;<br>      <span class="hljs-attr">transform</span>: <span class="hljs-title function_">translateY</span>(<span class="hljs-number">100</span>%);<br>  &#125;<br>&#125;<br>.<span class="hljs-property">up</span> &#123;<br>    <span class="hljs-attr">animation</span>: toUp <span class="hljs-number">0.</span>6s ease-<span class="hljs-keyword">in</span>-out <span class="hljs-number">1</span> normal;<br>&#125;<br>.<span class="hljs-property">btm</span> &#123;<br>    <span class="hljs-attr">animation</span>: toBtm <span class="hljs-number">0.</span>6s ease-<span class="hljs-keyword">in</span>-out <span class="hljs-number">1</span> normal;<br>&#125;<br>  <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器工作原理学习笔记</title>
    <link href="/2023/05/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-开篇知识点"><a href="#1-开篇知识点" class="headerlink" title="1 开篇知识点"></a>1 开篇知识点</h2><ul><li><p>首屏的显示就涉及了DNS、HTTP、DOM解析、CSS阻塞、JavaScript阻塞等技术因素，其中一项没处理好就可能导致整个页面的延时。</p></li><li><p>Node.js是前端发展的一个核心推动力</p></li><li><p>浏览器发展的主要动力可能来自于用户需求，以及安全、性能问题的日益凸显，但它可以从多线程进展到多进程是建立在硬件能力提升的基础打上的；而计算机硬件能力的提升，使得计算机使用范围扩大，从而催生了用户更多的需求，以及对安全、性能的更高要求。所以一切看起来似乎是工业发展的必然结果。</p></li><li><p>DNS缓存和页面资源缓存这两块数据是会被浏览器缓存的。</p></li><li><p>DOM和HTML内容几乎是一样的，但是和HTML不同的是，DOM是保存在内存中树状结构，可以通过JavaScript来查询或修改其内容。</p></li><li><p>按照渲染的时间顺序，流水线可分为如下几个子阶段：构建DOM树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。</p><p>  <a href="https://juejin.cn/post/7094207568926474254">https://juejin.cn/post/7094207568926474254</a></p></li><li><p>问：如果下载CSS文件阻塞了，会阻塞DOM树的合成吗？会阻塞页面的显示吗？</p><p>  答：不会阻塞DOM树的合成，但会阻塞页面的显示。</p><p>  官方回答：</p><ul><li><p>css加载不会阻塞DOM树的解析</p></li><li><p>css加载会阻塞DOM树的渲染</p></li><li><p>css加载会阻塞后面js语句的执行</p></li></ul><p>  参考网址：<a href="https://juejin.cn/post/6844903667733118983">https://juejin.cn/post/6844903667733118983</a></p></li></ul><h2 id="2-调用栈"><a href="#2-调用栈" class="headerlink" title="2 调用栈"></a>2 调用栈</h2><ul><li>调用栈是用来管理函数调用关系的一种数据结构。</li><li>调用栈有大小。</li></ul><h2 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3 作用域"></a>3 作用域</h2><ul><li><p>作用域指的是变量和函数的可访问范围。</p></li><li><p>var声明的变量存在变量提升变量提升带来的问题：</p><ol><li>变量容易被反直觉覆盖。</li><li>直觉上应该销毁的变量没有销毁。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myname = <span class="hljs-string">&quot;柯基笨笨&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myname);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">var</span> myname = <span class="hljs-string">&quot;柯基聪聪&quot;</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myname);<br>    &#125;<br><span class="hljs-title function_">showName</span>()<br><br><span class="hljs-literal">undefined</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myname = <span class="hljs-string">&quot;柯基笨笨&quot;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myname);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myname);<br>&#125;<br><span class="hljs-title function_">showName</span>()<br><br>柯基笨笨<br>柯基笨笨<br></code></pre></td></tr></table></figure></li></ol></li><li><p>变量提升问题的解决方法：块级作用域（let、const) 。</p><ul><li>var声明的变量放到变量环境中；</li><li>let声明的变量放到词法环境中；</li><li>函数作用域块内部，let声明的变量不放到词法环境中。</li></ul></li><li><p>块级作用域是通过 <strong>词法环境的栈结构</strong> 来实现的；变量提升是通过 <strong>变量环境</strong> 实现的；</p></li></ul><h2 id="4-作用域链"><a href="#4-作用域链" class="headerlink" title="4 作用域链"></a>4 作用域链</h2><ul><li>作用域链是代码运行过程中查找引用变量的路线。</li><li>js执行过程中的作用域链是由词法作用域决定的。</li><li>闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 闭包（外部函数执行结束，内部函数引用外部函数的变量依然保存在内存中，这些变量的集合称为闭包）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> myName = <span class="hljs-string">&quot;柯基笨笨&quot;</span><br>    <span class="hljs-keyword">let</span> test1 = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">const</span> test2 = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">var</span> innerBar = &#123;<br>        <span class="hljs-attr">getName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test1)<br>            <span class="hljs-keyword">return</span> myName<br>        &#125;,<br>        <span class="hljs-attr">setName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newName</span>)&#123;<br>            myName = newName<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> innerBar<br>&#125;<br><span class="hljs-keyword">var</span> bar = <span class="hljs-title function_">foo</span>()<br>bar.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;柯基聪聪&quot;</span>)<br>bar.<span class="hljs-title function_">getName</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-title function_">getName</span>())<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 没有形成闭包</span><br><span class="hljs-keyword">var</span> bar = &#123;<br>    <span class="hljs-attr">myName</span>:<span class="hljs-string">&quot;time.geekbang.com&quot;</span>,<br>    <span class="hljs-attr">printName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName)<br>    &#125;    <br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;柯基笨笨&quot;</span><br>    <span class="hljs-keyword">return</span> bar.<span class="hljs-property">printName</span><br>&#125;<br><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&quot;柯基聪聪&quot;</span><br><span class="hljs-keyword">let</span> _printName = <span class="hljs-title function_">foo</span>()<br><span class="hljs-title function_">_printName</span>()<br>bar.<span class="hljs-title function_">printName</span>()<br><br>柯基聪聪<br>柯基聪聪<br></code></pre></td></tr></table></figure></li><li>产生闭包的核心有两步：第一步是需要预扫描内部函数；第二步是把内部函数引用的外部变量保存到堆中。</li></ul><h2 id="5-变量提升"><a href="#5-变量提升" class="headerlink" title="5 变量提升"></a>5 变量提升</h2><h3 id="5-1-结论"><a href="#5-1-结论" class="headerlink" title="5.1 结论"></a>5.1 结论</h3><ul><li>若执行过程中遇到未声明的变量，则报错。</li><li>若执行过程中遇到下文定义的变量，该值为undefined，不是定义时的值。</li><li>若执行过程中遇到下文定义的函数，则函数正确执行。</li></ul><h3 id="5-2-原理"><a href="#5-2-原理" class="headerlink" title="5.2 原理"></a>5.2 原理</h3><ul><li>js数据类型</li><li>js执行机制：先编译，再执行。</li><li>js代码编译后，会生成两部分：执行上下文和可执行代码。</li><li>执行上下文：js代码的运行环境，该代码执行过程中的this、变量、对象以及函数等。</li><li>执行上下文中存在一个变量环境的对象，保存了变量环境的内容。</li></ul><h2 id="6-执行上下文"><a href="#6-执行上下文" class="headerlink" title="6 执行上下文"></a>6 执行上下文</h2><ul><li>执行上下文指得是js代码运行时的环境。</li><li>执行上下文分为全局执行上下文和函数执行上下文。</li></ul><h2 id="7-回调地狱"><a href="#7-回调地狱" class="headerlink" title="7 回调地狱"></a>7 回调地狱</h2><ul><li>回调函数嵌套回调函数。</li><li>参考链接：<a href="https://blog.csdn.net/qq_42698326/article/details/111075519">https://blog.csdn.net/qq_42698326/article/details/111075519</a></li></ul><h2 id="8-定时器、Promise和async-x2F-await"><a href="#8-定时器、Promise和async-x2F-await" class="headerlink" title="8 定时器、Promise和async&#x2F;await"></a>8 定时器、Promise和async&#x2F;await</h2><p>下面这段代码整合了定时器、Promise 和 async &#x2F; await ，你能分析出来这段代码执行后输出的内容吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bar start&#x27;</span>)<br>    <span class="hljs-comment">// 这里</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">foo</span>()    <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bar end&#x27;</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 这里</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-title function_">bar</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br><span class="hljs-comment">// 这里</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise executor&#x27;</span>)<br>    <span class="hljs-title function_">resolve</span>();<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 这里</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise then&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 答案</span><br>script start  <span class="hljs-comment">// 主线程</span><br>bar start  <span class="hljs-comment">// 主线程到协程 协程</span><br>foo  <span class="hljs-comment">// 协程 协程到主线程</span><br>promise executor <span class="hljs-comment">// 主线程</span><br>script end  <span class="hljs-comment">// 主线程</span><br>bar end <span class="hljs-comment">// 微任务 主线程到协程 协程</span><br>promise then   <span class="hljs-comment">// 微任务 主线程到协程 协程 // promise then  和 bar end 输出还存在问题  不同环境下，这两个输出的顺序不同。</span><br>settimeout <span class="hljs-comment">// 延迟队列</span><br></code></pre></td></tr></table></figure><p><img src="/../images/promise.png"></p><h3 id="8-1-相关知识点"><a href="#8-1-相关知识点" class="headerlink" title="8.1 相关知识点"></a>8.1 相关知识点</h3><ul><li><p>浏览器页面是由消息队列和事件循环来驱动的</p></li><li><p>定时器回调任务添加到延迟队列中</p></li><li><p>进程、线程、协程（比线程更小</p></li><li><p>async：异步执行和隐式返回<br>  await：背后是Promise和生成器（微任务和协程）；</p><p>  作用：暂停当前协程，并返回给父协程一个promise；等待父协程执行微任务中的回调，暂停父协程继续执行await所在的协程；</p></li></ul><h3 id="8-2-思考与总结"><a href="#8-2-思考与总结" class="headerlink" title="8.2 思考与总结"></a>8.2 思考与总结</h3><p>问：为什么要有promise？</p><p>答：为了解决“回调地狱”</p><p>问：promise如何解决的回调地狱问题？</p><p>答：针对嵌套调用promise采用了延迟绑定回调（用微任务的方法延迟回调；        针对任务的不确定性采用将返回值穿透到外层；        将错误处理合并成一个；</p><p>问：Promise中为什么要引入微任务？</p><p>答：为了实现延迟绑定回调。</p><p>问：Promise中是如何实现回调函数返回值穿透的？</p><p>答：通过调用promise.then 返回一个promise（bridge promise）,并在新promise的内部将成功时执行的回调函数放到队列，调用onresolve,onresolve 返回执行结果。resolve接受执行结果作为参数，方便后续调用。</p><p>问：Promise出错后，是怎么通过“冒泡”传递给最后那个捕获异常的函数？</p><p>答：这就要问问reject了</p><h3 id="8-3-Promise的运行过程"><a href="#8-3-Promise的运行过程" class="headerlink" title="8.3 Promise的运行过程"></a>8.3 Promise的运行过程</h3><ul><li>demo &#x3D; new Promise(executor)</li><li>executor-&gt;resolve</li><li>resolve-&gt;demo.then</li><li>demo.then-&gt;onResolve<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Bromise</span>(<span class="hljs-params">executor</span>) &#123;<br>    <span class="hljs-keyword">var</span> onResolve_ = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">var</span> onReject_ = <span class="hljs-literal">null</span><br>     <span class="hljs-comment">//模拟实现resolve和then，暂不支持rejcet</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">then</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onResolve, onReject</span>) &#123;<br>        onResolve_ = onResolve<br>    &#125;;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-title function_">onResolve_</span>(value)<br>           &#125;,<span class="hljs-number">0</span>)<br>    &#125;<br>    <span class="hljs-title function_">executor</span>(resolve, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-4-Promise构造函数"><a href="#8-4-Promise构造函数" class="headerlink" title="8.4 Promise构造函数"></a>8.4 Promise构造函数</h3><p>new Promise (executor)</p><ul><li>executor: 将一段处理函数产生的结果绑定在Promise上，方便后续传递</li><li>executor: 异步</li><li>executor: 提供回调</li><li>executor: 回调通过调用resolve终止回调</li><li>executor:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(resolve, reject) =&gt; &#123;<br>    <span class="hljs-title function_">resolve</span>(value)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(value)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(value)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>resolve:被调用结束回调</li><li>resolve:包含一个参数（可以赋值为异步处理结果）参数被返回给绑定的promise上</li></ul><h2 id="9-防抖和节流"><a href="#9-防抖和节流" class="headerlink" title="9 防抖和节流"></a>9 防抖和节流</h2><h3 id="9-1-防抖（debounce"><a href="#9-1-防抖（debounce" class="headerlink" title="9.1 防抖（debounce)"></a>9.1 防抖（debounce)</h3><ul><li>类比：乘电梯</li><li>特点：执行时间间隔不固定</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 封装</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, wait, immediate = <span class="hljs-literal">false</span>, max = <span class="hljs-number">10</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">let</span> timeStart = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>    <span class="hljs-keyword">let</span> times = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">if</span> (immediate &amp;&amp; !timer) &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(fn.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">0</span>, ...args)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>            timer = <span class="hljs-built_in">setTimeout</span>(fn.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), wait, ...args)<br>        &#125;<br>        times++<br>        <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br><br>        <span class="hljs-keyword">if</span> (times &gt;= max) &#123;<br>            times = <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (now &gt;= timeStart + wait) &#123;<br>            times = <span class="hljs-number">0</span><br>            timeStart = now<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 立即执行</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">func, wait, ...args</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timeout;   <span class="hljs-comment">// 首次进入的timeout应该是false</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">if</span> (timeout) <span class="hljs-title function_">cleatTimeout</span>(timeout);<br>    <span class="hljs-keyword">let</span> callNow = !timeout;  <span class="hljs-comment">// 首次进入的callNow会为!false也就是true，所以会上来执行方法</span><br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      timeout = <span class="hljs-literal">null</span>;<br>    &#125;,wait)<br>    <br>    <span class="hljs-keyword">if</span>(callNow) func.<span class="hljs-title function_">apply</span>(context,args)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 非立即执行</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">func, wait, ...args</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> timeout;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">if</span> (timeout) <span class="hljs-built_in">clearTimeout</span>(timeout); <span class="hljs-comment">// 如果在已经触发过一次函数的时候再次触发，那么timeout就会为true，也就会将定时器清空，从头再来～</span><br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      func.<span class="hljs-title function_">apply</span>(context, args)<br>    &#125;,wait);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-2-节流（throttle）"><a href="#9-2-节流（throttle）" class="headerlink" title="9.2 节流（throttle）"></a>9.2 节流（throttle）</h3><ul><li>类比：游戏放大招</li><li>特点：时间间隔固定</li><li>核心：时间戳大于预期<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 封装</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">func, wait</span>) &#123;<br>    <span class="hljs-keyword">let</span> pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> cur = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>        <span class="hljs-keyword">if</span> (cur - pre &gt; wait) <br>        <span class="hljs-comment">// arguments 是一个类数组对象。代表传给一个function的参数列表。</span><br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>            pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-链接跳转（原页面跳转or打开新标签页）"><a href="#10-链接跳转（原页面跳转or打开新标签页）" class="headerlink" title="10 链接跳转（原页面跳转or打开新标签页）"></a>10 链接跳转（原页面跳转or打开新标签页）</h2><p>参考链接：<a href="https://segmentfault.com/a/1190000024475135">https://segmentfault.com/a/1190000024475135</a></p><h2 id="11-this"><a href="#11-this" class="headerlink" title="11 this"></a>11 this</h2><ul><li>全局执行上下文：window</li><li>函数执行上下文<ul><li>默认其中的this也指向window</li><li>设置函数执行上下文中this的方法<ul><li>func.call(obj)</li><li>obj.func()</li><li>new: this指向对象</li></ul></li></ul></li><li>this设计缺陷<ul><li>嵌套函数中的this不能继承外部函数；即 func1.func2中的this指向window<ul><li>嵌套函数中声明self</li><li>箭头函数</li></ul></li><li>在默认情况下调用一个函数，其执行上下文中的this是默认指向全局对象window的<ul><li>在严格模式下，默认执行一个函数，其函数的执行上下文中的this值是undefined，这就解决上面的问题了。</li></ul></li></ul></li></ul><h2 id="12-堆栈"><a href="#12-堆栈" class="headerlink" title="12 堆栈"></a>12 堆栈</h2><ul><li>原始类型数据存放在栈中，引用类型的数据存放在堆中。</li><li>JavaScript的变量是没有数据类型的，值才有数据类型。</li></ul><h2 id="13-垃圾回收"><a href="#13-垃圾回收" class="headerlink" title="13 垃圾回收"></a>13 垃圾回收</h2><ul><li>标记——&gt;清理——&gt;整理</li><li>调用栈<ul><li>记录当前执行状态的指针下移</li></ul></li><li>堆空间<ul><li>副垃圾回收器（新生代，Scavenge算法<ul><li>标记——&gt;复制</li><li>对象晋升</li></ul></li><li>主垃圾回收器（老生代</li></ul></li></ul><h2 id="14-编译器与解释器"><a href="#14-编译器与解释器" class="headerlink" title="14 编译器与解释器"></a>14 编译器与解释器</h2><ul><li>js是解释型语言</li><li>v8如何执行js代码</li><li>如何优化js执行效率<ul><li>提升单次脚本的执行速度，避免JavaScript的长任务霸占主线程，这样可以使得页面快速响应交互；</li><li>避免大的内联脚本，因为在解析HTML的过程中，解析和编译也会占用主线程；</li><li>减少JavaScript文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>Browser</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS属性</title>
    <link href="/2022/10/09/CSS%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/10/09/CSS%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="0-flex"><a href="#0-flex" class="headerlink" title="0. flex"></a>0. flex</h2><ul><li>主要思想：父元素根据配置属性，调整子元素的高度、宽度、对齐方式、间隔，以更好的适应可用的布局空间。</li><li>使用场景：用于子元素大小未知或动态变化时（不定宽度，分布对齐），父元素有效的布局和对齐子元素。</li><li>特点：<ul><li>子元素的float、clear、vertical-align会失效</li></ul></li><li>常用属性：<ul><li><p>父元素</p><ul><li>display:flex | inline-flex</li><li>justify-content: center | flex-start(default) | flex-end | space-between(两端对齐) ｜ space-around(子元素两侧间隔相等)</li><li>align-items: center | stretch(default) | flex-start | flex-end | baseline</li><li>flex-direction: row | row-reverse | column | column-reverse</li><li>flex-wrap: wrap | nowrap | wrap-reverse</li><li>align-content: stretch(default) | flex-start | flex-end | center</li></ul></li><li><p>子元素</p><ul><li>常用属性值：<ul><li>default: flex: 0 1 auto</li><li>flex: 1(1,1,0%)</li><li>flex: none(0,0,auto)</li><li>flex: auto(1,1,auto)（最大内容尺寸）</li><li>flex: 0(0,1,0%)(最小内容宽度)</li><li>flex-basis: 0(子元素折叠为内容最小宽度，子元素作为整体考虑不会对其内容长短作区分)</li><li>flex-basis: auto(子元素的长短会根据元素本身的尺寸独立占位，分配元素周围的space)</li></ul></li></ul></li></ul></li><li>学习链接：<a href="https://juejin.cn/post/7004622232378966046%E3%80%81https://juejin.cn/post/6997802025614327838">https://juejin.cn/post/7004622232378966046、https://juejin.cn/post/6997802025614327838</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>CSS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>学前准备</title>
    <link href="/2022/09/18/%E5%AD%A6%E5%89%8D%E5%87%86%E5%A4%87/"/>
    <url>/2022/09/18/%E5%AD%A6%E5%89%8D%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>玩转CSS之美</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章</title>
    <link href="/2022/08/29/%E7%AC%AC%E4%B8%80%E7%AB%A0-1/"/>
    <url>/2022/08/29/%E7%AC%AC%E4%B8%80%E7%AB%A0-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>深入浅出Vue.js</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第四章 变量、作用域与内存</title>
    <link href="/2022/08/01/%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <url>/2022/08/01/%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>JavaScript变量是松散的，变量的值和数据类型咋脚本生命期内可以改变。</p><h3 id="4-1-原始值与引用值"><a href="#4-1-原始值与引用值" class="headerlink" title="4.1 原始值与引用值"></a>4.1 原始值与引用值</h3><p>原始值：最简单的数据；原始值是按值访问的，我们操作的就是存储在变量中的实际值；</p><p>引用值：多个值构成的对象；引用值是保存在内存中的对象，JS不允许直接访问内存位置；操作对象时实际操作的时该对象的引用，保存引用的变量是按引用访问的。</p><p>JS引擎必须确定这个值是原始值还是引用值</p><ul><li><p>动态属性</p><p>  引用值可以动态的添加后面可以使用的属性，原始值不可以；</p></li><li><p>复制值</p></li><li><p>传递参数</p></li><li><p>确定类型</p></li></ul><h3 id="4-2-执行上下问与作用域"><a href="#4-2-执行上下问与作用域" class="headerlink" title="4.2 执行上下问与作用域"></a>4.2 执行上下问与作用域</h3><h3 id="4-3-垃圾回收"><a href="#4-3-垃圾回收" class="headerlink" title="4.3 垃圾回收"></a>4.3 垃圾回收</h3><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>JavaScript 高级程序设计（第4版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第三章 语言基础</title>
    <link href="/2022/07/26/%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <url>/2022/07/26/%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h3><ul><li><p>区分大小写。</p></li><li><p>标识符开头字母、下划线、$;其他字母、数字、下划线、$。常用“驼峰式”书写。</p></li><li><p>注释</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">单行注释： <span class="hljs-regexp">//</span><br>多行注释： <span class="hljs-regexp">/* */</span><br><br></code></pre></td></tr></table></figure></li><li><p>ECMAScript 5增加了”严格模式”的概念，是一种不同的JavaScript解析和执行模型。</p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> strict<br></code></pre></td></tr></table></figure><p>  上述是一个预处理指令，使用这种方法可以不破坏ECMAScript语法。</p><p>  可以单独指定一个函数在严格模式下执行。</p>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-keyword">do</span><span class="hljs-constructor">Something()</span> &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span><br><br>    <span class="hljs-comment">// 函数体</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>语句末尾加上分号有助于提高性能，约定俗称加上分号。（虽然解释器可以自行确定语句在哪停止，可以去查查为什么）</p></li><li><p>最佳实践是在控制语句中使用代码块。</p></li></ul><h3 id="3-2-关键字与保留字"><a href="#3-2-关键字与保留字" class="headerlink" title="3.2 关键字与保留字"></a>3.2 关键字与保留字</h3><ul><li>关键字和保留字不能用作标识符，一般不用来做属性名。</li></ul><h3 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h3><p>变量可以用于保存任何类型的数据。let、const更精确的声明了作用域和语义。最佳实践如下：</p><ol><li>不使用var。</li><li>const优先，let次之。</li></ol><ul><li><p>var</p><ul><li><p>声明作用域</p><ul><li><p>var声明的变量是包含该var声明变量的函数的局部变量,即是函数作用域。</p></li><li><p>省略var操作符会创建一个全局变量，严格模式下会ReferenceError。</p></li></ul></li><li><p>声明提升</p><ul><li>var声明的变量会把“变量声明”自动提升到函数作用域的顶部。</li><li>允许反复多次用var声明变量。</li></ul></li></ul></li><li><p>let</p><ul><li>let声明的是块作用域。块作用域是函数作用域的子集，适用于var的作用域限制同样也适用于let。</li><li>不允许同一个块作用域出现冗余声明。</li><li>暂时性死区： 在let声明之前执行的瞬间。</li><li>全局声明：  <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var * <span class="hljs-operator">=</span> a<span class="hljs-comment">;</span><br>window.* <span class="hljs-operator">=</span> a<span class="hljs-comment">;</span><br><br>let * <span class="hljs-operator">=</span> b<span class="hljs-comment">;</span><br>页面唯一，*重复声明报SyntaxError。<br></code></pre></td></tr></table></figure></li><li>条件声明：</li></ul><p>  条件声明模式值得是当不确定变量是否已经声明时，假设变量没有声明过。但由于let不能重复声明，所以不能依赖条件生命。</p><ul><li>for循环：</li></ul><p>  let声明很适用于for循环，因为迭代变量的作用域仅限于for循环内部。</p></li><li><p>const</p><ul><li>声明变量时必须同时初始化变量且尝试修改const声明的变量会导致运行错误。</li><li>const声明变量是块作用域。</li><li>const声明的不能修改的限制只适用于他指向的变量的引用，对于对象，可以修改对象内部的属性。</li></ul></li></ul><h3 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h3><p>ECMAScript有6种简单数据类型（原始类型）1种复杂数据类型（对象，无序名值对）。</p><ul><li><p>typeof操作符</p><ul><li>确定任意变量的类型,其中函数严格说来也是一种对象，但是函数有自己特殊的属性，因此有必要通过typeof来区分函数和其他对象。</li></ul></li><li><p>Undefined（typeof——&gt;undefined)</p><ul><li><p>应用场景</p><ul><li>变量声明但未初始化。</li><li>一般不显式的设置undefined，常用于比较。</li></ul></li><li><p>空对象指针和未初始化变量是不同的</p><ul><li>未声明的变量只能进行typeof操作。</li><li>变量未声明和变量未初始化的typeof操作都返回undefined。</li><li>最佳实践式声明的同时进行初始化，对于未确定具体对象值的对象可以初始化为null,这样typeof返回值为undefined就说明是变量尚未声明。</li></ul></li></ul></li><li><p>Null(typeof——&gt;Object)</p><ul><li>可用于初始化将来保存对象值的变量。</li><li>undefined是由null派生过来的<br>  <code>https://kb.cnblogs.com/page/77089/</code></li></ul></li><li><p>Boolean(typeof——&gt;boolean)</p><ul><li>有两个字面量：true,false</li><li>所有EMCAScript类型的值都有相应的布尔值的等价形式。</li></ul></li><li><p>Number(typeof——&gt;number)</p><p>  使用IEEE754表示整数和浮点数，不同的数值有不同的数值字面量表示。八进制、十进制、十六进制等。</p><ul><li><p>浮点值</p><ul><li><p>浮点值必须有小数点，且小数点后面必须至少有一个数字。</p></li><li><p>存储浮点值的内存空间是存储整数的两倍。</p></li><li><p>1.0、10.0会被转换成整数。</p></li><li><p>非常大或者非常小的数值用科学计数法来表示。浮点数的最大精确值可以达到17位。</p></li><li><p>由于使用了IEEE754,存在浮点数的舍入错误，所有永远不要测试某个特定的浮点值。</p></li></ul></li><li><p>值的范围</p><p>  内存限制：ECMAScript无法表示所有的数值。</p><ul><li>最小值：Number.MIN_VALUE;</li><li>最大值：Number.MAX_VALUE;</li><li>任何无法表示的负数用-Infinity表示;</li><li>任何无法表示的整数用Infinity表示;</li><li>确定数值是否是可表示的优先数值用isFinite()判断;</li><li>Number.NEGATIVE_INFINITY——&gt;-Infinity;</li><li>Number.POSITIVE_INFINITY——&gt;Infinity;</li></ul></li><li><p>NaN</p><p>  用于替代“抛出错误”表示“返回数值的操作失败了”;可以用来区分错误和NaN。其他语言用0除任意数值都会导致错误，ECMAScript中会返回NaN。</p><ul><li>任何涉及NaN的操作始终返回NaN。</li><li>NaN不等于包括NaN在内的任何值（NaN&#x3D;&#x3D;NaN?false)。</li><li>isNaN()函数判断一个参数是否“不是数值”。任何不能转换位数值的值都会导致这个函数位true.<ul><li>对于对象valueOf()——&gt;toString()——&gt;isNaN();</li></ul></li></ul></li><li><p>数值转换</p><ul><li><p>Number()</p><p>  可用于任何数据类型。</p><ul><li><p>布尔值：true——&gt;1;false——&gt;0;</p></li><li><p>数值：直接返回;</p></li><li><p>null：0;</p></li><li><p>undefined：返回NaN;</p></li><li><p>字符串：</p><ul><li>“1”——&gt;1 “011”——&gt;11;</li><li>“1.1”——&gt;1.1 “01.1”——&gt;1.1;</li><li>“0xa”——&gt;10;</li><li>“”——&gt;0;</li><li>其他返回NaN;</li></ul></li><li><p>对象</p><ul><li>valueOf()——&gt;toString()</li></ul></li><li><p>其他返回NaN;</p></li></ul></li><li><p>parseInt()</p><p>  主要用于将字符串转换为数值。从第一个非空字符开始转换，如果第一个字符不是数值字符、加号、减号，parseInt立即返回NaN;碰到非数值字符后舍掉后面字符。</p><ul><li>“”——&gt;NaN;</li><li>“1234blue”——&gt;1234;</li><li>22.5——&gt;22;</li><li>0xf——&gt;15;</li><li>parseInt(参数, 进制数值);&#x2F;&#x2F;默认十进制</li></ul></li><li><p>parseFloat()</p><p>  主要用于将字符串转换为数值。从位置0检测到每个字符，解析到字符串末尾或者解析到一个无效的浮点数值字符为止。</p><ul><li>只解析十进制，十六进制返回0；</li><li>始终忽略字符串开头的零；</li><li>“22.5”——&gt;22.5;</li><li>“22.34.5”——&gt;22.35;</li><li>“0xa”——&gt;0;</li><li>“0908.5”——&gt;908.5;</li><li>“3.125e7”——&gt;31250000;</li></ul></li></ul></li></ul></li><li><p>String(typeof——&gt;string)</p><p>  表示零或多个16位Unicode字符序列。单引号（’）、双引号（”)、反引号（&#96;)都可以表示。</p><ul><li><p>字符字面量</p><p>  ‘\n’——&gt;换行</p><p>  ‘\b’——&gt;退格</p><p>  ‘\r’——&gt;回车</p><p>  ‘\f’——&gt;换页</p><p>  ‘\xnn’——&gt;以十六进制编码nn表示的字符</p><p>  ‘\unnnn’——&gt;以十六进制编码nnnn表示的unicode字符</p><p>  <code>注：转义序列表示一个字符 </code></p></li><li><p>字符串的特点</p><ul><li>字符串一旦被创建就不能变了。（注意不能改变的是字符串而不是变量中的字符串）</li><li>修改变量中的字符串，必须销毁原始的字符串值，然后将包含新值的另一个字符串保存到该变量。</li></ul></li><li><p>转换为字符串</p><ul><li><p>toString()</p><ul><li>返回当前值（数值、字符串、布尔值、对象不包括null和undefined）的字符串的等价物。</li><li>数值的toString()方法可以根据参数的数值输出对应的进制的数值。</li><li>found.toString()。</li></ul></li><li><p>String()</p><ul><li><p>返回相应类型值的字符串。</p><ul><li>如果值有toString()方法则调用该方法并返回结果。</li><li>如果值是null,返回null。</li><li>如果值是undefined,返回undefined。</li></ul></li></ul></li></ul></li><li><p>模板字面量</p><ul><li>模板字面量用&#96;&#96;来定义。</li><li>模板字面量会保留反引号内部的换行字符。</li><li>模板字面量会保留反引号内部的空格。</li><li>技术上讲，模板字面量不是字符串而是一种特殊的JS句法表达式，求值后的结果是字符串。</li></ul></li><li><p>字符串插值</p><ul><li>实现方式：${}中使用一个JS表达式实现。</li></ul></li><li><p>模板字面量标签函数</p><ul><li>标签函数：<ul><li><p>参数是被插值记号分割后的模板和对每个表达式求值的结果。</p><p>  <code>function // simpleTag(</code>${a}+${b}&#x3D;${c}<code>)</code></p></li><li><p>对于有n个插值的模板字面量，标签函数的表达式参数始终是n个，原始字符串数组包含的字符串个数为n+1;</p></li></ul></li></ul></li><li><p>原始字符串</p><ul><li>String.raw`\n`——&gt;\n</li><li>String.raw可以将模板字面量直接转换为Unicode字符。</li></ul></li></ul></li><li><p>Symbol(typeof——&gt;symbol)</p><p>  确保对象属性使用的唯一标识符，不会发生属性冲突。</p><p>  符号实例是唯一的、不可变的。</p><ul><li><p>基本用法</p><ul><li>符号本身是原始数据类型。</li><li>let sym &#x3D; Symbol();<ul><li>字符串参数作为符号的描述;</li><li>字符串参数于符号定义或者标识完全无关；</li></ul></li><li>typeof(sym) &#x2F;&#x2F;symbol</li><li>只要创建Symbol实例并将其用作对象的属性，就可以保证它不会覆盖已有的对象属性；</li><li>Symbol()不能和new关键字一起作为构造函数使用。<ul><li>符号包装对象<ul><li>Object(Symbol())</li></ul></li></ul></li></ul></li><li><p>全局符号注册表</p><ul><li><p>共享和重用符号实例</p><p>  <code>幂等：f(f(x)) = f(x)</code></p><p>  <code>字符串键、符号</code></p><p>  Symbol.for()对每个字符串键执行幂等操作。将任意类型的参数转换为字符串值。维护并检查全局运行时注册表。</p><p>  全局注册表中的符号必须使用字符串键来解决。</p><p>  Symbol.keyFor()来查询全局注册表，这个方法接收符号，返回该全局顾好对应的字符串键。</p><p>  <code>Symbol.for():全局符号</code></p><p>  <code>Symbol():普通符号</code></p></li></ul></li><li><p>符号作为属性</p><p>  凡是可以使用“字符串”或者“数值”作为属性的地方，都可以使用符号。</p></li><li><p>常用内置符号</p><p>  以工厂函数字符串属性的形式存在。用于暴露语言内部行为，开发者可以直接访问、重写、或模拟这些行为。【重新定义】他们。</p><ul><li><p>Symbol.asyncIterator（方法）</p><p>  <code>迭代：为了实现目标和结果的重复相同的过程并且结果会被用来下一次迭代的活动</code></p><ul><li>实现“异步迭代器”的API函数，ES2018规范定义。</li><li>一个方法，该方法返回对象默认的AsyncIterator。</li><li>由for-await-of语句使用。</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// async *[Symbol.asyncIterator]这个用法挺特别的。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Emitter</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">max</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">max</span> = max;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">asyncIdx</span> = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">async</span> *[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">asyncIterator</span>]() &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">asyncIdx</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">max</span>)&#123;<br>            <span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">asyncIdx</span>++));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// for-await-of体现在这里</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncCount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> emitter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emitter</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> emitter ) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">asyncCount</span>();<br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure></li><li><p>Symbol.hasInstance（方法）</p><ul><li>用于判定一个构造器对象是否认可一个对象是他的实例。</li><li>由instanceof操作符使用。</li><li>这个属性定义在Function原型上，默认在所有的类和函数上都可以调用。</li><li>同在原型量上寻找其他属性一样</li></ul></li><li><p>Symbol.isConcatSpreadable（布尔值）</p><p>  <code>Array.prototype.concat()方法用于合并两个或者多个数组。//只打平一层</code></p><p>  <code>String.prototype.split()方法用于根据指定字符划分字符串为字符数组</code></p><p>  Symbol.isConcatSpreadable用作修改数组拼接数组实例的行为。</p><p>  console.log(Array[Symbol.isConcatSpreadable]) &#x2F;&#x2F;undefined</p><p>  Array[Symbol.isConcatSpreadable] &#x3D; true &#x2F;&#x2F; 按照concat方法的规则合并数组。</p><p>  Array[Symbol.isConcatSpreadable] &#x3D; false &#x2F;&#x2F; 把整个对象追加到数组的末尾。</p></li><li><p>Symbol.iterator（方法）</p><ul><li>实现“迭代器”的API函数，ES2018规范定义。</li><li>一个方法，该方法返回对象默认的迭代器。</li><li>由for-of语句使用。</li><li>类似上文，可能需要回看。</li></ul></li><li><p>Symbol.match（方法）</p><ul><li>String.prototype.match()方法会以Symbol.match为键的函数来对正则表达式进行求值。</li><li>正则表达式的原型上有这个方法。</li></ul></li><li><p>Symbol.replace（方法）</p><ul><li>String.prototype.replace()方法使用来替换一个字符串中替换的字串。</li><li>传入非正则表达式会将该值转换为RegExp对象。</li></ul></li><li><p>Symbol.search</p><ul><li>String.prototype.search()方法使用来查询匹配字符串的索引。</li></ul></li><li><p>Symbol.species（函数值）（最常用）</p><ul><li>可以作为创建派生对象的构造函数。</li><li>用于对【内置类型实例方法的返回值】暴露【实例化派生对象】的方法。</li><li>实例：定义静态的获取器方法。</li></ul></li><li><p>Symbol.split (方法)</p><ul><li>String.prototype.split()方法使用。</li><li>在匹配正则表达式的索引位置拆分字符串，并返回字符串数组。</li></ul></li><li><p>Symbol.toPrimitive （方法）</p><ul><li>将对象转换为相应的原始值。</li><li>由ToPrimitive抽象操作使用。</li><li>通过String.toPrimitive属性上定义一个函数可以改变默认行为。</li></ul></li><li><p>Symbol.toStringTag （字符串）</p><ul><li>创建对象的默认字符串描述。&#x2F;&#x2F;默认为Object</li><li>Object.prototype.toString()使用。</li></ul></li><li><p>Symbol.unscopables （对象）</p><ul><li>该对象所有的以及集成的属性都会从关联对象的with环境中排除。&#x2F;&#x2F; 不推荐使用</li></ul></li></ul></li></ul></li><li><p>Object(typeof——&gt;object)</p><p>  Object实例本身不是很重要，但是理解他的概念非常有必要。</p><ul><li><p>派生其他类的基类；</p></li><li><p>共有的属性和方法</p><ul><li>constructor&lt;——&gt;Object();</li><li>hasOwnProperty():用于判断当前的对象实例上是否存在给定的属性，属性名必须是字符串。</li><li>isPrototypeOf():用于判断一个对象是不是另一个对象的原型。</li><li>propertyIsEnumerable():用于判断给定的属性是否可以使用for-in语句枚举，属性名必须是字符串。</li></ul><p>  <code>for-in 和 for-of等区别</code></p><ul><li>toLocaleString():反映对象所在的本地化执行环境。</li><li>toString():返回对象的字符串表示。</li><li>valueOf():返回对象对应的字符串、数值、布尔值。</li></ul><p>  <code>问： toString()和valueOf()的区别在哪</code></p><p>  <code>ECMA-262不一定适合JS中的其他对象，例如BOM、DOM都是由浏览器提供的宿主对象，由于宿主对象可能会也可能不受ECMA-262约束</code></p></li></ul><p>  所有对象其实就是一组数据和功能的集合。</p></li></ul><h3 id="3-5-操作符"><a href="#3-5-操作符" class="headerlink" title="3.5 操作符"></a>3.5 操作符</h3><ul><li>一元操作符<ul><li><p>递增、递减操作符</p><ul><li>后缀吧和前缀版的主要区别在于，后缀版递增和递减先求值再赋值。</li></ul></li><li><p>一元加和减操作符</p><ul><li>Number()强制转型</li></ul></li><li><p>位操作符</p><ul><li>数值底层操作（内存IEEE754)</li><li>补码：取反加一</li><li>不直接应用64位，先把数值转换为32位，再进行位操作。</li><li>对于负数来说，无符号右移和有符号右移结果相差很大。</li></ul></li><li><p>布尔操作符</p><ul><li>逻辑与和逻辑或有短路的特性。</li></ul></li><li><p>乘性操作符</p><ul><li>无意义js中返回特殊值防止出错。</li><li>若无法表示乘积，则返回Infinity或Infinity。</li><li>若0除以0，则返回NaN。</li><li>若非0的有限值除以0，根据第一个操作符的符号返回Infinity或-Infinity。</li><li>若被除数是有限值，除数是无限值，则返回被除数。</li></ul></li><li><p>指数操作符</p><ul><li>Math.pow()</li></ul></li><li><p>加性操作符</p><ul><li>若Infinity加-Infinity返回NaN。</li><li>若+0减-0，则返回-0；</li><li>若-0减-0，则返回+0；</li></ul></li><li><p>关系操作符</p><ul><li>数值比较&#x2F;字符串中对应字符比较&#x2F;操作数转换为数值，执行数值比较。</li></ul></li><li><p>相等操作符</p><ul><li>NaN!&#x3D;NaN -&gt; true;</li></ul></li><li><p>条件操作符</p><ul><li>?&#x3D;</li></ul></li><li><p>赋值操作符</p><ul><li>简单赋值&#x2F;复合赋值;</li><li>位运算是可逆的——&gt;不存在无符号左移;</li></ul></li><li><p>逗号操作符</p><ul><li>let a &#x3D; 1, b &#x3D; 2;</li><li>let a &#x3D; (1,2,3,4) &#x2F;&#x2F;4</li></ul></li></ul></li></ul><h3 id="3-6-语句-流控制语句"><a href="#3-6-语句-流控制语句" class="headerlink" title="3.6 语句(流控制语句)"></a>3.6 语句(流控制语句)</h3><ul><li>if语句</li><li>do-while语句</li><li>while语句</li><li>for语句<br>增加了进入循环之前的初始化代码，以及执行循环后要执行的表达式。</li></ul><p><code>无法用while实现的也无法用for实现</code></p><ul><li><p>for-in语句（严格的迭代语句）</p><ul><li>枚举对象中的非符号键属性。</li><li>for(const a in object); &#x2F;&#x2F;推荐使用const</li><li>循环顺序无序</li><li>如果循环到undefined或者null，则不执行循环体；</li></ul></li><li><p>for-of语句（严格迭代语句）</p><ul><li>for(const a in object); &#x2F;&#x2F;推荐使用const</li><li>循环会按照迭代对象的next()方法产生值的顺序迭代元素。</li></ul></li><li><p>标签语句</p><ul><li>应用场景：嵌套循环；</li><li>后面通过break和continue使用；</li></ul></li><li><p>break和continue语句</p><ul><li>break立即退出循环，执行下一条语句；</li><li>continue退出循环，再次从循环顶部开始执行；</li></ul></li><li><p>with语句</p><ul><li>将代码作用域设置为特定的对象；</li><li>针对一个对象反复操作，将代码作用域设置为该对象能提供便利；</li><li>严格模式下不允许使用；</li></ul></li><li><p>switch语句</p><ul><li>优化分支语句；</li><li>每个条件加上break;</li><li>switch语句可以用于所有数据类型，条件值不需要常量，也可以是变量或者表达式；</li></ul></li></ul><h3 id="3-7-函数"><a href="#3-7-函数" class="headerlink" title="3.7 函数"></a>3.7 函数</h3><ul><li>遇到return立刻返回；</li><li>return语句可以不带返回值，函数会立即执行并返回undefined；</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>EMCAScript不区分整数和浮点是，只有Number一种类型；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>JavaScript 高级程序设计（第4版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二章 HTML中的JavaScript</title>
    <link href="/2022/07/26/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2022/07/26/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><code>问： 现在不同浏览器的最新版本</code></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="2-1-lt-script-gt-标签"><a href="#2-1-lt-script-gt-标签" class="headerlink" title="2.1 &lt;script&gt;标签"></a>2.1 &lt;script&gt;标签</h3><ol><li><p>目的：将JS插入到HTML中。</p></li><li><p>属性： </p><ul><li><p>async: 只对外部文件有效，立即下载脚本，但不阻止其他页面动作。</p></li><li><p>charset: 很少使用，说明src指代的目标文件的字符编码，charset需要和src搭配使用。</p></li><li><p>crossorigin：将请求模式设置为http CORS(跨域资源共享)，默认不使用CORS。</p><ul><li>anonymous: 执行跨域请求，不发送凭据。</li><li>use-credentials: 执行跨域请求，发送凭据（cookie，证书，http基本身份验证）</li></ul></li></ul><p> <code>问：什么是跨域？</code></p><p> <code>答：网页需要请求其他服务器的资源的请求状态</code></p><ul><li>defer: 只对外部文件有效。可以用来延迟脚本执行（直到页面文档完全解析和显示以后）。立即下载，延迟执行。</li><li>integrity: 属性值指定加密签名，允许比对接受到的资源签名和该属性值是否一致。</li><li>language: 废弃。以前用来指定代码语言版本。</li><li>src: 表示要执行的外部文件。</li><li>type: 惯例：text&#x2F;javascript、application&#x2F;x-javascript、module(ES6模块)。</li></ul></li><li><p>使用方式:</p><ul><li><p>行内js:直接把代码放到元素中。</p></li><li><p>外部js文件:src属性</p><ul><li>&lt;script src&#x3D;”***.js”/&gt;是无效的HTML，在有的浏览器中无法使用。</li><li>如果不打算使用js扩展名，一定要确保服务器能返回正确的MIME类型。</li><li>使用src属性不应该在标签中再加其他js代码,若加，浏览器只会下载并执行脚本文件，忽略行内代码。</li><li>本质是发送GET请求。</li></ul></li><li><p>动态加载脚本:document.createElement(‘script’)</p><ul><li><p>默认执行方式相当于加了async属性。</p></li><li><p>统一浏览器动态加载行为，element.async&#x3D;false</p></li><li><p>浏览器预加载器不可见，影响资源获取优先级。</p><ul><li>&lt;link ref&#x3D;”preload” href&#x3D;”***.js”&gt;</li></ul></li></ul></li></ul></li><li><p>解释特征：</p><ul><li>js代码保存在解释器里。</li><li>js代码被计算完之前，页面其余内容不会被加载，也不会被显示。</li><li>解释顺序：（都立即下载）<ul><li>若无defer、async则依次顺序执行。</li><li>若有defer则延迟到整个页面都解析完后再执行。（即解析到&lt;&#x2F;html&gt;，DOMContentLoaded事件执行之前)</li><li>若有async则异步执行（在页面load事件前执行，可能在DOMContentLoaded之前或之后）。异步js脚本不能在加载期间修改DOM（因为脚本执行的时机不确定，若等到了页面加载完成后执行，需要重新渲染，效率和用户体验都很差。所以，document.write方法不会在async脚本中使用，好的web开发实践一般不使用。</li></ul></li></ul></li><li><p>标签位置：<br> 通常是body元素页面内容后面，即作为body元素内容紧贴&lt;body/&gt;。</p></li><li><p>XHTML</p><ul><li>将HTML作为XML的应用重新包装后的产物。</li><li>XHTML中使用js必须设置”type&#x3D;text&#x2F;javascript”。</li><li>&lt; ——&gt; &amp;lt</li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">//&lt;![CDATA[<br><br>        *任意文本，不作为标签来解析*<br>        <br>//]]&gt;<br><br></code></pre></td></tr></table></figure></li><li></li></ul></li></ol><h3 id="2-2-行内代码与外部文件"><a href="#2-2-行内代码与外部文件" class="headerlink" title="2.2 行内代码与外部文件"></a>2.2 行内代码与外部文件</h3><ul><li><p>最佳实践：外部文件</p><ul><li>可维护性，一处更新，多处使用。</li><li>缓存：浏览器会根据特定的设置缓存所有外部链接的js文件。更快。</li><li>适应未来，良好的兼容了HTML和XHTML。<br>  <code>注： SPDY/HTTP2 预请求的消耗已经显著降低？咋么降低的？</code></li></ul></li></ul><h3 id="2-3-文档模式"><a href="#2-3-文档模式" class="headerlink" title="2.3 文档模式"></a>2.3 文档模式</h3><ul><li>文档模式一般分为混杂模式和标准模式。通过doctype可以切换。<ul><li>据说浏览器一致性目前是不存在的，要使用黑科技。</li><li>混杂模式省略doctype声明作为开关。</li><li>标准模式有特定的文档类型声明，具体现查吧。</li></ul></li></ul><h3 id="2-4-lt-noscript-gt-元素"><a href="#2-4-lt-noscript-gt-元素" class="headerlink" title="2.4 &lt;noscript&gt;元素"></a>2.4 &lt;noscript&gt;元素</h3><ul><li>用于给不支持js的浏览器提供替换内容。<ul><li>浏览器不支持脚本。</li><li>浏览器对脚本的支持关闭。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>JavaScript 高级程序设计（第4版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>认知驱动</title>
    <link href="/2022/07/26/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/"/>
    <url>/2022/07/26/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Metal</category>
      
      <category>认知驱动</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>认知觉醒</title>
    <link href="/2022/07/26/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/"/>
    <url>/2022/07/26/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Metal</category>
      
      <category>认知觉醒</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第六章</title>
    <link href="/2022/07/01/%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
    <url>/2022/07/01/%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><code>问：a标签、img标签的属性是什么</code></p><p><code>问：试一试例子</code></p>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>JavaScript DOM 编程艺术（第2版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章 什么是JavaScript</title>
    <link href="/2022/07/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2022/07/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><ol><li>网景 Mocha——&gt;LiveScript——&gt;JavaScript</li></ol><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>Javascript:</p><ol><li><p>ECMAScript(核心)</p><ol><li>宿主环境：Web浏览器、Node.js、Adobe Flash</li><li>版本：2019年第十版</li></ol></li><li><p>DOM（文档对象模型）</p><ol><li>应用编程接口，用于HTML中使用扩展XML</li><li>保持Web跨平台特性</li><li>DOM Core、 DOM HTML</li><li>DOM Level1、DOM Level2、DOM Level3</li></ol></li><li><p>BOM（浏览器对象模型）</p><ol><li>操控浏览器显示页面以外的部分</li><li>主要针对浏览器窗口和oh不那么子窗口</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>JavaScript 高级程序设计（第4版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2022/07/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/07/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>Computer Network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2022/07/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/07/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
      <category>Operating System</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>各行其是</title>
    <link href="/2022/06/23/%E5%90%84%E8%A1%8C%E5%85%B6%E6%98%AF/"/>
    <url>/2022/06/23/%E5%90%84%E8%A1%8C%E5%85%B6%E6%98%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="各行其是"><a href="#各行其是" class="headerlink" title="各行其是"></a>各行其是</h2><p>各行其是是否有利于时代和国家的发展呢？目前我没有结论。</p><h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><p>大道废，有仁义。</p><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>2022年互联网企业裁员潮，互联网员工人人自危。当然员工的恐慌不仅仅是企业家造成的。无论是时代发展的泡沫还是疫情的时代背景，其中的原因很复杂。但在国家双减政策下，俞敏洪在其中展现的风采却被网友大为称赞，堪称仁义之举。</p><p>这是为什么呢？</p><p>想来也是对比其他企业家唯收益的雷霆裁员手段把。</p><p>真可谓是，大道废，有仁义。</p>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Philosophy</category>
      
      <category>道德经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>宠辱不惊</title>
    <link href="/2022/06/23/%E5%AE%A0%E8%BE%B1%E4%B8%8D%E6%83%8A/"/>
    <url>/2022/06/23/%E5%AE%A0%E8%BE%B1%E4%B8%8D%E6%83%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="宠辱不惊"><a href="#宠辱不惊" class="headerlink" title="宠辱不惊"></a>宠辱不惊</h2><h3 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h3><p>宠辱若惊，贵大患若身。</p><p>老子认为，‘宠’和‘辱’对人的尊严损伤没有什么两样。受辱固然损伤了自尊，受宠何尝不损害自身的人格尊严呢？</p><p>得宠者总觉得受宠是一份意外的殊荣，便担心失去，因而人格尊严无形地受到损害.如果一个人未经受任何辱与宠，那么他在任何人面前都可以傲然而立，保持自己完整独立地人格。</p>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Philosophy</category>
      
      <category>道德经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git-pull</title>
    <link href="/2022/06/22/Git-pull/"/>
    <url>/2022/06/22/Git-pull/</url>
    
    <content type="html"><![CDATA[<ul><li>git pull 的作用是什么？</li><li>Failed to connect to github.com port 443 after 21067 ms: med out<ul><li>产生该问题的原因是什么？<ul><li>本地的VPN导致git proxy出现问题。具体什么问题目前还不清楚，见以后吧。</li></ul></li><li>如何解决该问题？<ul><li><code>git config --global --unset http.proxy</code></li></ul></li></ul></li><li>fatal: refusing to merge unrelated histories<ul><li>产生该问题的原因是什么？<ul><li>可能会在git pull或者git push中都有可能会遇到，这是因为两个分支没有取得关系。</li></ul></li><li>如何解决该问题？<ul><li><code>git pull origin master --allow-unrelated-histories</code></li><li>–allow-unrelated-histories:允许不相关的历史。</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Work</category>
      
      <category>Useful Commands</category>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第五章</title>
    <link href="/2022/06/22/%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <url>/2022/06/22/%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><h3 id="5-2-平稳退化"><a href="#5-2-平稳退化" class="headerlink" title="5.2 平稳退化"></a>5.2 平稳退化</h3><p>所谓的平稳退化就是虽然某些功能无法使用，但基本的操作仍能完成。</p><hr><p>window.open()方法</p><p>这是BOM的一个典型的方法。作用是打开一个浏览器窗口。</p><p><code>问：浏览器的组成部分是什么？</code></p><p>DOM是文档内容相关，BOM是浏览器相关的，BOM的相关方法不会直接影响文档内容。</p><p>open方法有三个参数，url、name、feature三者都可省略。</p><p>url的作用是在新打开的窗口中打开指定url的内容。</p><p>name的作用是方便代码中引用name和窗口通信。</p><p>feature的作用是用逗号分隔的字符串来表示窗口的属性。</p><p><code>示例： window.open(url, name, feature)</code></p><p>函数本身不会影响网页的可访问性，唯一可以影响的是：我将如何使用该函数。</p><hr><p>伪协议通过链接来调用函数<br><code>javascript:函数(&quot;http://****&quot;)</code>但是，这种方法在HTML文档中非常不好！</p><p>内嵌事件处理函数<code>&lt;a onclick=&quot;popUp(链接);return false&quot;&gt;&lt;/a&gt;</code>,这种方法在HTML文档中同样非常不好！</p><p>为何平稳退化这么重要？</p><p>针对浏览Web时同时禁用图像和JavaScript的类似于搜索机器人的用户，如果不能平稳退化，大大影响了网站的推销速度。</p><p><code>&lt;a href=&quot;链接&quot; onclick=&quot;popUp(&#39;链接&#39;);return false&quot;&gt;&lt;/a&gt;</code></p><p><code>&lt;a href=&quot;链接&quot; onclick=&quot;popUp(this.href);return false&quot;&gt;&lt;/a&gt;</code></p><p><code>注：this.href是DOM方法，JS代码全部放到外部文件里更好。</code><br><code>问：为什么return false href不起作用</code></p><h3 id="5-3-向CSS学习"><a href="#5-3-向CSS学习" class="headerlink" title="5.3 向CSS学习"></a>5.3 向CSS学习</h3><ol><li>Web文档的内容结构（标记）和版面设计（样式）分离。</li><li>真正能从CSS技术获益的方法是把样式全部转移到外部文件中去。</li><li>引入方法：样式信息存入外部文件，再在文档的head部分用link标签来调用这个文件。</li><li>渐进增强：以后还可以改；标记良好的内容就是一切；</li></ol><h3 id="5-4-分离JavaScript"><a href="#5-4-分离JavaScript" class="headerlink" title="5.4 分离JavaScript"></a>5.4 分离JavaScript</h3><ol><li>行为与结构内容分离。</li><li>获取文档中元素的方法：getElementById(一个),getElementsByTagName(多个),getAttribute（多个）。<ul><li>把文档中所有的结果放入一个数组中。</li><li>遍历数组。</li><li>找到函数相应处理元素。</li></ul></li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// 个人手敲错误答案<br>var links <span class="hljs-operator">=</span> document.getElementsByTagName(<span class="hljs-string">&quot;a&quot;</span>)<span class="hljs-comment">;</span><br>for( let i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; links.length; i++)&#123;</span><br>  if(links[i] <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> popUp)&#123;<br>    function()&#123;<br>      popUp(this.href)<span class="hljs-comment">;</span><br>      return false<span class="hljs-comment">;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这个链接被点击时，调用popUp函数,并取消默认操作</span><br><span class="hljs-keyword">var</span> links = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; links.<span class="hljs-property">length</span>; i++)&#123;<br>  <span class="hljs-keyword">if</span>(links[i].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>) == <span class="hljs-string">&quot;popup&quot;</span>)&#123;<br>    links[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-title function_">popUp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;href&quot;</span>));<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>注：getElementsByTagName必须在HTML文档完全加载到浏览器并且DOM完整才开始执行。</code></p><p><code>html文档全部加载后会触发window.onload事件，当window对象触发onload事件时，document对象已经存在。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这个链接被点击时，调用popUp函数,并取消默认操作。</span><br><span class="hljs-comment">//js文件存放在外部文件。</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = prepareLinks;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">prepareLinks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> links = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; links.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>(links[i].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;class&quot;</span>) == <span class="hljs-string">&quot;popup&quot;</span>)&#123;<br>      links[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">popUp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;href&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-向后兼容"><a href="#5-5-向后兼容" class="headerlink" title="5.5 向后兼容"></a>5.5 向后兼容</h3><ol><li><p>渐进增强———&gt;对象监测</p><p> <code>例：if(!document.getElementsByTagName) return false; </code></p></li><li><p>浏览器嗅探技术（已被取代）</p><p> 指： 通过JS代码就可以提取浏览器供应商提供的信息（浏览器品牌和版本）</p></li></ol><h3 id="5-6-性能考虑"><a href="#5-6-性能考虑" class="headerlink" title="5.6 性能考虑"></a>5.6 性能考虑</h3><ol><li><p>尽量减少操作DOM的次数和尽量减少标记</p><p> <code>例：在多个函数操作同一组【元素】的情况下</code></p><ol><li>把搜索结果放到一个【全局变量】里</li><li>把搜索结果直接以【参数的形式】传递给函数</li></ol></li><li><p>合并和放置脚本</p><ol><li>使用外部脚本</li><li>减少请求数量，合并为同一个js文件</li></ol><p> <code>注： 根据HTTP规范，浏览器每次从同一个域名中最多只能同时下载两个文件</code></p><p> <code>&lt;script&gt;放到&lt;/body&gt;标记之前</code></p></li><li><p>压缩脚本</p><p> 删除空格、注释</p><ol><li>常用工具： JSMin、YUI Compressor、Closure Compiler</li><li>工作方法： 一个工作副本（修改代码并添加注释）一个精简副本（放于站点）</li></ol></li></ol><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
      <category>Technology</category>
      
      <category>JavaScript DOM 编程艺术（第2版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>乐观向上</title>
    <link href="/2022/06/22/%E4%B9%90%E8%A7%82%E5%90%91%E4%B8%8A/"/>
    <url>/2022/06/22/%E4%B9%90%E8%A7%82%E5%90%91%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="写项目"><a href="#写项目" class="headerlink" title="写项目"></a>写项目</h3><ol><li>原则上需求分析及需求评审后，应按照需求开发，若有变动，应协调大家一起调整需求。</li><li>编码的过程是复杂变简单，抽象变具体的过程。</li><li>做好工作的核心目标是想让项目变得更好。</li><li>沟通和文档核心是表述清晰。</li><li>如果被问为什么要做这个系统？我们要追求可以卖的软件。</li></ol><h3 id="做人"><a href="#做人" class="headerlink" title="做人"></a>做人</h3><ol><li>人好像真的是越努力越平庸耶。</li><li>脸皮厚一点，不要脸是武学最高境界。</li><li>物质上的相对贫乏貌似可以自洽，自我精神上的贫乏不可以。</li><li>永远不要绝望，因为绝望是最没用的东西，想想流浪地球。</li><li>在不危及生命安全的逃跑之前，先停下来，想一想。</li><li>在机会丢失的瞬间，慢慢训练自己不需要马上舔舐伤口，不要马上放弃。宠辱不惊的做事。</li><li>从今天起，做一个宠辱不惊，对未知敬畏又坚定，积极主动的人。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
      <category>Positive Energy Motto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用链接</title>
    <link href="/2022/06/22/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/"/>
    <url>/2022/06/22/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章用来记录学习和工作中遇到的值得收藏的链接。可用作字典，有机会多多回顾，避免收藏夹吃灰。</p></blockquote><ul><li>【Hexo Fluid用户手册】 <a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></li><li>【在线Markdown编辑器示例】 <a href="https://markdown.com.cn/editor/">https://markdown.com.cn/editor/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Work</category>
      
      <category>Useful Commands</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>唐山打人事件</title>
    <link href="/2022/06/22/%E5%94%90%E5%B1%B1%E6%89%93%E4%BA%BA%E4%BA%8B%E4%BB%B6/"/>
    <url>/2022/06/22/%E5%94%90%E5%B1%B1%E6%89%93%E4%BA%BA%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
      <category>News</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git常用指令</title>
    <link href="/2022/06/22/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/06/22/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>此文章列举Git常用指令，以后将会根据自己实际运用重新整理一遍。</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs tap"> <span class="hljs-number"> 1 </span>查看、添加、提交、删除、找回，重置修改文件<br> <span class="hljs-number"> 2 </span><br> <span class="hljs-number"> 3 </span><br> <span class="hljs-number"> 4 </span>git help &lt;command&gt; <span class="hljs-comment"># 显示command的help</span><br> <span class="hljs-number"> 5 </span><br> <span class="hljs-number"> 6 </span>git show <span class="hljs-comment"># 显示某次提交的内容 git show $id</span><br> <span class="hljs-number"> 7 </span><br> <span class="hljs-number"> 8 </span>git co -- &lt;file&gt; <span class="hljs-comment"># 抛弃工作区修改</span><br> <span class="hljs-number"> 9 </span><br><span class="hljs-number"> 10 </span>git co . <span class="hljs-comment"># 抛弃工作区修改</span><br><span class="hljs-number"> 11 </span><br><span class="hljs-number"> 12 </span>git add &lt;file&gt; <span class="hljs-comment"># 将工作文件修改提交到本地暂存区</span><br><span class="hljs-number"> 13 </span><br><span class="hljs-number"> 14 </span>git add . <span class="hljs-comment"># 将所有修改过的工作文件提交暂存区</span><br><span class="hljs-number"> 15 </span><br><span class="hljs-number"> 16 </span>git rm &lt;file&gt; <span class="hljs-comment"># 从版本库中删除文件</span><br><span class="hljs-number"> 17 </span><br><span class="hljs-number"> 18 </span>git rm &lt;file&gt; --cached <span class="hljs-comment"># 从版本库中删除文件，但不删除文件</span><br><span class="hljs-number"> 19 </span><br><span class="hljs-number"> 20 </span>git reset &lt;file&gt; <span class="hljs-comment"># 从暂存区恢复到工作文件</span><br><span class="hljs-number"> 21 </span><br><span class="hljs-number"> 22 </span>git reset -- . <span class="hljs-comment"># 从暂存区恢复到工作文件</span><br><span class="hljs-number"> 23 </span><br><span class="hljs-number"> 24 </span>git reset --hard <span class="hljs-comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="hljs-number"> 25 </span><br><span class="hljs-number"> 26 </span>git ci &lt;file&gt; git ci . git ci -a <span class="hljs-comment"># 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;</span><br><span class="hljs-number"> 27 </span><br><span class="hljs-number"> 28 </span>git ci --amend <span class="hljs-comment"># 修改最后一次提交记录</span><br><span class="hljs-number"> 29 </span><br><span class="hljs-number"> 30 </span>git revert &lt;$id&gt; <span class="hljs-comment"># 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="hljs-number"> 31 </span><br><span class="hljs-number"> 32 </span>git revert HEAD <span class="hljs-comment"># 恢复最后一次提交的状态</span><br><span class="hljs-number"> 33 </span><br><span class="hljs-number"> 34 </span>查看文件diff<br><span class="hljs-number"> 35 </span><br><span class="hljs-number"> 36 </span><br><span class="hljs-number"> 37 </span>git help &lt;command&gt; <span class="hljs-comment"># 显示command的help</span><br><span class="hljs-number"> 38 </span><br><span class="hljs-number"> 39 </span>git show <span class="hljs-comment"># 显示某次提交的内容 git show $id</span><br><span class="hljs-number"> 40 </span><br><span class="hljs-number"> 41 </span>git co -- &lt;file&gt; <span class="hljs-comment"># 抛弃工作区修改</span><br><span class="hljs-number"> 42 </span><br><span class="hljs-number"> 43 </span>git co . <span class="hljs-comment"># 抛弃工作区修改</span><br><span class="hljs-number"> 44 </span><br><span class="hljs-number"> 45 </span>git add &lt;file&gt; <span class="hljs-comment"># 将工作文件修改提交到本地暂存区</span><br><span class="hljs-number"> 46 </span><br><span class="hljs-number"> 47 </span>git add . <span class="hljs-comment"># 将所有修改过的工作文件提交暂存区</span><br><span class="hljs-number"> 48 </span><br><span class="hljs-number"> 49 </span>git rm &lt;file&gt; <span class="hljs-comment"># 从版本库中删除文件</span><br><span class="hljs-number"> 50 </span><br><span class="hljs-number"> 51 </span>git rm &lt;file&gt; --cached <span class="hljs-comment"># 从版本库中删除文件，但不删除文件</span><br><span class="hljs-number"> 52 </span><br><span class="hljs-number"> 53 </span>git reset &lt;file&gt; <span class="hljs-comment"># 从暂存区恢复到工作文件</span><br><span class="hljs-number"> 54 </span><br><span class="hljs-number"> 55 </span>git reset -- . <span class="hljs-comment"># 从暂存区恢复到工作文件</span><br><span class="hljs-number"> 56 </span><br><span class="hljs-number"> 57 </span>git reset --hard <span class="hljs-comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="hljs-number"> 58 </span><br><span class="hljs-number"> 59 </span>git ci &lt;file&gt; git ci . git ci -a <span class="hljs-comment"># 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;</span><br><span class="hljs-number"> 60 </span><br><span class="hljs-number"> 61 </span>git ci --amend <span class="hljs-comment"># 修改最后一次提交记录</span><br><span class="hljs-number"> 62 </span><br><span class="hljs-number"> 63 </span>git revert &lt;$id&gt; <span class="hljs-comment"># 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="hljs-number"> 64 </span><br><span class="hljs-number"> 65 </span>git revert HEAD <span class="hljs-comment"># 恢复最后一次提交的状态</span><br><span class="hljs-number"> 66 </span><br><span class="hljs-number"> 67 </span>查看提交记录<br><span class="hljs-number"> 68 </span><br><span class="hljs-number"> 69 </span>git log git log &lt;file&gt; <span class="hljs-comment"># 查看该文件每次提交记录</span><br><span class="hljs-number"> 70 </span><br><span class="hljs-number"> 71 </span>git log -p &lt;file&gt; <span class="hljs-comment"># 查看每次详细修改内容的diff</span><br><span class="hljs-number"> 72 </span><br><span class="hljs-number"> 73 </span>git log -p -2 <span class="hljs-comment"># 查看最近两次详细修改内容的diff</span><br><span class="hljs-number"> 74 </span><br><span class="hljs-number"> 75 </span>git log --stat <span class="hljs-comment">#查看提交统计信息</span><br><span class="hljs-number"> 76 </span>tig<br><span class="hljs-number"> 77 </span><br><span class="hljs-number"> 78 </span>Mac上可以使用tig代替diff和log，brew install tig<br><span class="hljs-number"> 79 </span><br><span class="hljs-number"> 80 </span><br><span class="hljs-number"> 81 </span>Git 本地分支管理<br><span class="hljs-number"> 82 </span>查看、切换、创建和删除分支<br><span class="hljs-number"> 83 </span><br><span class="hljs-number"> 84 </span><br><span class="hljs-number"> 85 </span>git br -r <span class="hljs-comment"># 查看远程分支</span><br><span class="hljs-number"> 86 </span><br><span class="hljs-number"> 87 </span>git br &lt;new_branch&gt; <span class="hljs-comment"># 创建新的分支</span><br><span class="hljs-number"> 88 </span><br><span class="hljs-number"> 89 </span>git br -v <span class="hljs-comment"># 查看各个分支最后提交信息</span><br><span class="hljs-number"> 90 </span><br><span class="hljs-number"> 91 </span>git br --merged <span class="hljs-comment"># 查看已经被合并到当前分支的分支</span><br><span class="hljs-number"> 92 </span><br><span class="hljs-number"> 93 </span>git br --no-merged <span class="hljs-comment"># 查看尚未被合并到当前分支的分支</span><br><span class="hljs-number"> 94 </span><br><span class="hljs-number"> 95 </span>git co &lt;branch&gt; <span class="hljs-comment"># 切换到某个分支</span><br><span class="hljs-number"> 96 </span><br><span class="hljs-number"> 97 </span>git co -b &lt;new_branch&gt; <span class="hljs-comment"># 创建新的分支，并且切换过去</span><br><span class="hljs-number"> 98 </span><br><span class="hljs-number"> 99 </span>git co -b &lt;new_branch&gt; &lt;branch&gt; <span class="hljs-comment"># 基于branch创建新的new_branch</span><br>100 <br>101 git co $id <span class="hljs-comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br>102 <br>103 git co $id -b &lt;new_branch&gt; <span class="hljs-comment"># 把某次历史提交记录checkout出来，创建成一个分支</span><br>104 <br>105 git br -d &lt;branch&gt; <span class="hljs-comment"># 删除某个分支</span><br>106 <br>107 git br -D &lt;branch&gt; <span class="hljs-comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br>108  分支合并和reba<br>109 git merge &lt;branch&gt; <span class="hljs-comment"># 将branch分支合并到当前分支</span><br>110 <br>111 git merge origin/master --no-ff <span class="hljs-comment"># 不要Fast-Foward合并，这样可以生成merge提交</span><br>112 <br>113 git rebase master &lt;branch&gt; <span class="hljs-comment"># 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br>114  Git补丁管理(方便在多台机器上开发同步时用)<br>115 <br>116 <br>117 git merge &lt;branch&gt; <span class="hljs-comment"># 将branch分支合并到当前分支</span><br>118 <br>119 git merge origin/master --no-ff <span class="hljs-comment"># 不要Fast-Foward合并，这样可以生成merge提交</span><br>120 <br>121 git rebase master &lt;branch&gt; <span class="hljs-comment"># 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br>122 <br>123  Git暂存管<br>124 git stash <span class="hljs-comment"># 暂存</span><br>125 <br>126 git stash list <span class="hljs-comment"># 列所有stash</span><br>127 <br>128 git stash apply <span class="hljs-comment"># 恢复暂存的内容</span><br>129 <br>130 git stash drop <span class="hljs-comment"># 删除暂存区</span><br>131 <br>132 Git远程分支管理<br>133 <br>134 git pull <span class="hljs-comment"># 抓取远程仓库所有分支更新并合并到本地</span><br>135 <br>136 git pull --no-ff <span class="hljs-comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br>137 <br>138 git fetch origin <span class="hljs-comment"># 抓取远程仓库更新</span><br>139 <br>140 git merge origin/master <span class="hljs-comment"># 将远程主分支合并到本地当前分支</span><br>141 <br>142 git co --track origin/branch <span class="hljs-comment"># 跟踪某个远程分支创建相应的本地分支</span><br>143 <br>144 git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; <span class="hljs-comment"># 基于远程分支创建本地分支，功能同上</span><br>145 <br>146 git push <span class="hljs-comment"># push所有分支</span><br>147 <br>148 git push origin master <span class="hljs-comment"># 将本地主分支推到远程主分支</span><br>149 <br>150 git push -u origin master <span class="hljs-comment"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br>151 <br>152 git push origin &lt;local_branch&gt; <span class="hljs-comment"># 创建远程分支， origin是远程仓库名</span><br>153 <br>154 git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; <span class="hljs-comment"># 创建远程分支</span><br>155 <br>156 git push origin :&lt;remote_branch&gt; <span class="hljs-comment">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br>157 <br>158 Git远程仓库管<br>159 git remote -v <span class="hljs-comment"># 查看远程服务器地址和仓库名称</span><br>160 <br>161 git remote show origin <span class="hljs-comment"># 查看远程服务器仓库状态</span><br>162 <br>163 git remote add origin git@ github:robbin/robbin_site.git <span class="hljs-comment"># 添加远程仓库地址</span><br>164 <br>165 git remote set-url origin git@ github.com:robbin/robbin_site.git <span class="hljs-comment"># 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span><br>166 <br>167 创建远程仓库<br>168 <br>169 git clone --bare robbin_site robbin_site.git <span class="hljs-comment"># 用带版本的项目创建纯版本仓库</span><br>170 <br>171 scp -r my_project.git git@ git.csdn.net:~ <span class="hljs-comment"># 将纯仓库上传到服务器上</span><br>172 <br>173 mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init <span class="hljs-comment"># 在服务器创建纯仓库</span><br>174 <br>175 git remote add origin git@ github.com:robbin/robbin_site.git <span class="hljs-comment"># 设置远程仓库地址</span><br>176 <br>177 git push -u origin master <span class="hljs-comment"># 客户端首次提交</span><br>178 <br>179 git push -u origin develop <span class="hljs-comment"># 首次将本地develop分支提交到远程develop分支，并且track</span><br>180 <br>181 git remote set-head origin master <span class="hljs-comment"># 设置远程仓库的HEAD指向master分支</span><br>182 <br>183 也可以命令设置跟踪远程库和本地库<br>184 <br>185 git branch --set-upstream master origin/master<br>186 <br>187 git branch --set-upstream develop origin/develop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Work</category>
      
      <category>Useful Commands</category>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
